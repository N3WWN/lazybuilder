---
# Module vars and data import
- name: "Setup the {{ mock_builder }} module directories"
  file:
    path: '{{ item }}'
    owner: '{{ mock_builder }}'
    group: '{{ mock_builder }}'
    mode: '0755'
    state: directory
  loop:
    - "/home/{{ mock_builder }}/module"
  tags:
    - module

################################################################################
# Module tracking data
- name: "Module tracker data - file data"
  block:
    - name: "Placeholder for future mechanism"
      set_fact:
        module_dist_increment_track: "000"
      tags:
        - module
  when:
    - module_tracker == 'file'
  rescue:
    - name: We failed, display the error
      debug:
        msg: "We failed to set the fact for some reason."

    - name: Fail when there's an error in the block
      fail:
        msg: "Exiting entire play"

- name: "Module tracker data - database"
  block:
    - name: debug
      debug:
        msg: "Not available yet."

    - meta: end_play
  when:
    - module_tracker == 'db'
# End
################################################################################

# Import the module yaml from somewhere? Could be file or git+file
# module_yaml_location: http|git
# Set module_data_location regardless of which mode (?)
################################################################################
# Module data import
- name: "Module Info - git mode"
  block:
    # Assert that our required vars are set
    - name: "Verify that our required vars are set"
      assert:
        that:
          - module_git_repo is defined
          - module_git_branch is defined
        success_msg: "git repo is set"
        fail_msg: "git repo is not set"
      tags:
        - module

    - name: "Verify that our required vars are set for defaults"
      assert:
        that:
          - module_defaults_git_repo is defined
          - module_defaults_git_branch is defined
        success_msg: "git defaults repo is set"
        fail_msg: "git defaults repo is not set"
      tags:
        - module

    # checkout the git repo with the module data
    - name: "Check out the module git repo"
      git:
        repo: "{{ module_git_repo }}"
        dest: "{{ mock_builder_source_dir }}/module/{{ source_name }}"
        version: "{{ module_git_branch }}"
      register: module_git_info
      tags:
        - module

    # If modules have defaults, checkout git repo
    - name: "Check out the defaults git repo if needed"
      git:
        repo: "{{ module_defaults_git_repo }}"
        dest: "{{ mock_builder_source_dir }}/module/defaults"
        version: "{{ module_defaults_git_branch }}"
      register: module_defaults_git_info
      when: module_has_defaults|bool
      tags:
        - module

    - name: "Check that the yaml exists for a module"
      stat:
        path: "{{ mock_builder_source_dir }}/module/{{ source_name }}/{{ source_name }}.yaml"
      register: module_data_yaml
      check_mode: false
      changed_when: "1 != 1"
      tags:
        - module

    - name: "Check that the yaml exists for a module"
      stat:
        path: "{{ mock_builder_source_dir }}/module/defaults/{{ source_name }}.yaml"
      register: module_data_defaults_yaml
      check_mode: false
      changed_when: "1 != 1"
      when: module_has_defaults|bool
      tags:
        - module

    - name: "Verify that the yaml exists for a module"
      assert:
        that:
          - module_data_yaml.stat.exists
        fail_msg: "{{ source_name }}.yaml does NOT exist in this repo"
        success_msg: "{{ source_name }}.yaml was found"
      tags:
        - module

    - name: "Verify that the defaults yaml exists for a module"
      assert:
        that:
          - module_data_defaults_yaml.stat.exists
        fail_msg: "{{ source_name }}.yaml does NOT exist in this repo"
        success_msg: "{{ source_name }}.yaml was found"
      when: module_has_defaults|bool
      tags:
        - module

    # import the yaml associated
    - name: "Importing module vars from file"
      include_vars:
        file: "{{ mock_builder_source_dir }}/module/{{ source_name }}/{{ source_name }}.yaml"
        name: module_data
      tags:
        - module

    # generate necessary vars - the contexts in MBS land are an odd combination
    # of different things. The module context itself is a combination of a
    # runtime and a build context. it's unclear where the runtime context comes
    # from. there also appears to be "xmd" related calls, but since we're not
    # using mbs + koji directly, it'll always be empty and basically unused.
    # so instead, we're coming up with a different method of generating
    # contexts for now to get around it. it's not ideal, but it's just one way
    # of doing it until I can figure out what's actually going on to a fuller
    # extent. As a result, between minor releases, it's highly likely that the
    # module_context will be the same for some time. On the flipside, the
    # dist_hash should (in theory) always be different.
    #
    # Note that if you need a module to be built for another architecture, but
    # you want to keep the current timestamp (recommended), set module_version
    # in your playbook.
    #
    # TODO: Allow contexts or hashes to be manually defined in playbooks
    - name: "Generate necessary vars"
      set_fact:
        module_stream: "{{ module_data.data.stream }}"
        module_build_context_full: "{{ module_data.data.dependencies[0]['buildrequires'] | hash('sha1') }}"
        module_runtime_context_full: "{{ module_data.data.dependencies[0]['requires'] | hash('sha1') }}"
        module_build_context: "{{ module_build_context_full[:8] }}"
        module_runtime_context: "{{ module_runtime_context_full[:8] }}"
        module_context: "{{ ([module_build_context_full, module_runtime_context_full]|join(':') | hash('sha1'))[:8] }}"
        module_dist_hash: "{{ ([source_name, module_stream, module_version, module_context]|join('.') | hash('sha1'))[:8] }}"
        artifacts:
          rpms: []
      tags:
        - module

    # import vars/module/main.yml to fulfill other pieces
    - name: "Importing final required vars"
      include_vars:
        file: "module/main.yml"
      tags:
        - module
  when:
    - module_yaml_location_type == 'git'

- name: "Module Info - http mode"
  block:
    - name: debug
      debug:
        msg: "Not available yet."

    - meta: end_play
  when:
    - module_yaml_location_type == 'http'
# End
################################################################################
...
